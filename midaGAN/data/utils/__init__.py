# coding=utf-8
# Copyright (c) midaGAN Contributors
import random
import numpy as np

from midaGAN.utils import sitk_utils
import logging
from typing import Union

logger = logging.getLogger(__name__)


def pad(volume, target_shape):
    assert len(target_shape) == len(volume.shape)
    # By default no padding
    pad_width = [(0, 0) for _ in range(len(target_shape))]

    for dim in range(len(target_shape)):
        if target_shape[dim] > volume.shape[dim]:
            pad_total = target_shape[dim] - volume.shape[dim]
            pad_per_side = pad_total // 2
            pad_width[dim] = (pad_per_side, pad_total % 2 + pad_per_side)

    return np.pad(volume, pad_width, 'constant', constant_values=volume.min())


def decollate(batch: Union[dict, list]):
    """
    Function to decollate or get individual elements
    from a collated batch generated by Pytorch

    Inputs:
    batch: Batched output, for example, from the Pytorch dataloader
    """
    if isinstance(batch, list):
        batch = [elem[0] if isinstance(elem[0], str) else np.array(elem) for elem in batch]
    elif isinstance(batch, dict):
        batch = {k: v[0] if isinstance(v[0], str) else np.array(v) for k, v in batch.items()}

    return batch
